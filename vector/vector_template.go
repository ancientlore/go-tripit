package main

func getTemplate() string {
	return `// This file was generated by a tool. Do not edit.
package {{{Package}}}

import (
	"os"
	"json"
	"container/vector"
)

// A specialization of Vector for {{{Type}}} objects
type {{{Name}}}Vector struct {
	vector.Vector
}

// AppendVector appends the entire vector x to the end of this vector.
func (p *{{{Name}}}Vector) AppendVector(x *{{{Name}}}Vector) {
	p.Vector.AppendVector(&x.Vector)
}

// At returns the i'th element of the vector.
func (p *{{{Name}}}Vector) At(i int) {{{Type}}} {
	return p.Vector.At(i).({{{Type}}})
}

// Copy makes a copy of the vector and returns it.
func (p *{{{Name}}}Vector) Copy() {{{Name}}}Vector {
	return {{{Name}}}Vector{p.Vector.Copy()}
}

// Do calls function f for each element of the vector, in order. The behavior of Do is undefined if f changes *p.
func (p *{{{Name}}}Vector) Do(f func(elem {{{Type}}})) {
	p.Vector.Do(func(e interface{}) { f(e.({{{Type}}})) })
}

// Insert inserts into the vector an element of value x before the current element at index i.
func (p *{{{Name}}}Vector) Insert(i int, x {{{Type}}}) {
	p.Vector.Insert(i, x)
}

// InsertVector inserts into the vector the contents of the vector x such that the 0th element of x appears at
// index i after insertion.
func (p *{{{Name}}}Vector) InsertVector(i int, x *{{{Name}}}Vector) {
	p.Vector.InsertVector(i, &x.Vector)
}

// Last returns the element in the vector of highest index.
func (p *{{{Name}}}Vector) Last() {{{Type}}} {
	return p.Vector.Last().({{{Type}}})
}

// Pop deletes the last element of the vector.
func (p *{{{Name}}}Vector) Pop() {{{Type}}} {
	return p.Vector.Pop().({{{Type}}})
}

// Push appends x to the end of the vector.
func (p *{{{Name}}}Vector) Push(x {{{Type}}}) {
	p.Vector.Push(x)
}

// Resize changes the length and capacity of a vector. If the new length is shorter than the current length,
// Resize discards trailing elements. If the new length is longer than the current length, Resize adds the
// respective zero values for the additional elements. The capacity parameter is ignored unless the new length
// or capacity is longer than the current capacity. The resized vector's capacity may be larger than the
// requested capacity.
func (p *{{{Name}}}Vector) Resize(length, capacity int) *{{{Name}}}Vector {
	p.Vector = *p.Vector.Resize(length, capacity)
	return p
}

// Set sets the i'th element of the vector to value x.
func (p *{{{Name}}}Vector) Set(i int, x {{{Type}}}) {
	p.Vector.Set(i, x)
}

// Slice returns a new sub-vector by slicing the old one to extract slice [i:j]. The elements are copied.
// The original vector is unchanged.
func (p *{{{Name}}}Vector) Slice(i, j int) *{{{Name}}}Vector {
	v := p.Vector.Slice(i, j)
	return &{{{Name}}}Vector{*v}
}

// UnmarshalJSON customizes the JSON unmarshalling by accepting single elements or arrays of elements.
func (p *{{{Name}}}Vector) UnmarshalJSON(b []byte) os.Error {
	var arr []{{{Type}}}
	err := json.Unmarshal(b, &arr)
	if err != nil {
		arr = make([]{{{Type}}}, 1)
		err := json.Unmarshal(b, &arr[0])
		if err != nil {
			return err
		}
	}
	p.Cut(0, p.Len())
	for _, v := range arr {
		p.Push(v)
	}
	return nil
}

// MarshalJSON customizes the JSON output for Vectors.
func (p *{{{Name}}}Vector) MarshalJSON() ([]byte, os.Error) {
	a := make([]{{{Type}}}, p.Len())
	for i := 0; i < p.Len(); i++ {
		a[i] = p.At(i)
	}
	return json.Marshal(a)
}
`
}

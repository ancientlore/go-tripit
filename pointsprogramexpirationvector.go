package tripit

// This file was generated by a tool. Do not edit.

import (
	"os"
	"json"
	"container/vector"
)

// A specialization of Vector for PointsProgramExpiration objects
type PointsProgramExpirationVector struct {
	vector.Vector
}

// AppendVector appends the entire vector x to the end of this vector.
func (p *PointsProgramExpirationVector) AppendVector(x *PointsProgramExpirationVector) {
	p.Vector.AppendVector(&x.Vector)
}

// At returns the i'th element of the vector.
func (p *PointsProgramExpirationVector) At(i int) PointsProgramExpiration {
	return p.Vector.At(i).(PointsProgramExpiration)
}

// Copy makes a copy of the vector and returns it.
func (p *PointsProgramExpirationVector) Copy() PointsProgramExpirationVector {
	return PointsProgramExpirationVector{p.Vector.Copy()}
}

// Do calls function f for each element of the vector, in order. The behavior of Do is undefined if f changes *p.
func (p *PointsProgramExpirationVector) Do(f func(elem PointsProgramExpiration)) {
	p.Vector.Do(func(e interface{}) { f(e.(PointsProgramExpiration)) })
}

// Insert inserts into the vector an element of value x before the current element at index i.
func (p *PointsProgramExpirationVector) Insert(i int, x PointsProgramExpiration) {
	p.Vector.Insert(i, x)
}

// InsertVector inserts into the vector the contents of the vector x such that the 0th element of x appears at
// index i after insertion.
func (p *PointsProgramExpirationVector) InsertVector(i int, x *PointsProgramExpirationVector) {
	p.Vector.InsertVector(i, &x.Vector)
}

// Last returns the element in the vector of highest index.
func (p *PointsProgramExpirationVector) Last() PointsProgramExpiration {
	return p.Vector.Last().(PointsProgramExpiration)
}

// Pop deletes the last element of the vector.
func (p *PointsProgramExpirationVector) Pop() PointsProgramExpiration {
	return p.Vector.Pop().(PointsProgramExpiration)
}

// Push appends x to the end of the vector.
func (p *PointsProgramExpirationVector) Push(x PointsProgramExpiration) {
	p.Vector.Push(x)
}

// Resize changes the length and capacity of a vector. If the new length is shorter than the current length,
// Resize discards trailing elements. If the new length is longer than the current length, Resize adds the
// respective zero values for the additional elements. The capacity parameter is ignored unless the new length
// or capacity is longer than the current capacity. The resized vector's capacity may be larger than the
// requested capacity.
func (p *PointsProgramExpirationVector) Resize(length, capacity int) *PointsProgramExpirationVector {
	p.Vector = *p.Vector.Resize(length, capacity)
	return p
}

// Set sets the i'th element of the vector to value x.
func (p *PointsProgramExpirationVector) Set(i int, x PointsProgramExpiration) {
	p.Vector.Set(i, x)
}

// Slice returns a new sub-vector by slicing the old one to extract slice [i:j]. The elements are copied.
// The original vector is unchanged.
func (p *PointsProgramExpirationVector) Slice(i, j int) *PointsProgramExpirationVector {
	v := p.Vector.Slice(i, j)
	return &PointsProgramExpirationVector{*v}
}

// UnmarshalJSON customizes the JSON unmarshalling by accepting single elements or arrays of elements.
func (p *PointsProgramExpirationVector) UnmarshalJSON(b []byte) os.Error {
	var arr []PointsProgramExpiration
	err := json.Unmarshal(b, &arr)
	if err != nil {
		arr = make([]PointsProgramExpiration, 1)
		err := json.Unmarshal(b, &arr[0])
		if err != nil {
			if err2, ok := err.(*json.UnmarshalTypeError); ok && err2.Value == "null" {
				arr = arr[0:0]
			} else {
				return err
			}
		}
		
	}
	p.Cut(0, p.Len())
	for _, v := range arr {
		p.Push(v)
	}
	return nil
}

// MarshalJSON customizes the JSON output for Vectors.
func (p *PointsProgramExpirationVector) MarshalJSON() ([]byte, os.Error) {
	var a []PointsProgramExpiration
	if p == nil {
		a = make([]PointsProgramExpiration, 0)
	} else {
		a = make([]PointsProgramExpiration, p.Len())
		for i := 0; i < p.Len(); i++ {
			a[i] = p.At(i)
		}
	}
	return json.Marshal(a)
}

// Data returns all the elements as a slice.
func (p *PointsProgramExpirationVector) Data() []PointsProgramExpiration {
	arr := make([]PointsProgramExpiration, p.Len())
	var i int
	i = 0
	p.Do(func(v PointsProgramExpiration) {
		arr[i] = v
		i++
	})
	return arr
}
